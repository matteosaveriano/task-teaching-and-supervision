:- module(matrix_util).
:- export matrix / 3.
:- export matrix / 4.
:- export list2rows / 4.
:- export list2cols / 4.
:- export transpose / 2.
:- export concat / 2.
:- export read_data / 3.
:- comment(categories, ["Data Structures", "Programming Utilities"]).
:- comment(summary, "Predicates to build matrices from lists").
:- comment(author, "Joachim Schimpf, IC-Parc").
:- comment(copyright, "Cisco Systems, Inc").
:- comment(date, "$Date: 2013/12/18 18:52:58 $").
:- comment(desc, html("<p>This library contains predicates for representing and manipulating matrices as nested lists.  Both list of rows and list of columns can be created and mapped into each other.</p><p>Note that newer versions of ECLiPSe have good support for representing matrices as multi-dimensional arrays, which is often preferrable to the list representation used here.</p>")).
:- comment(concat / 2, [summary : "Concatenate all the rows (or columns) into a flat list", template : "concat(+RowsOrCols, -List)", see_also : [list2rows / 4, list2cols / 4, transpose / 2], eg : "\n    ?- list2rows([1,2,3,4,5,6],2,3,Rows), concat(Rows,Xs).\n    Rows = [[1, 2, 3], [4, 5, 6]]\n    Xs = [1, 2, 3, 4, 5, 6]\n    Yes (0.00s cpu)\n    "]).
:- comment(list2cols / 4, [summary : "Create a matrix from a flat list of row-wise listed elements", template : "list2cols(+List, +NRows, +NCols, -Cols)", eg : "\n    ?- list2cols([1,2,3,4,5,6],2,3,Cols).\n    Cols = [[1, 4], [2, 5], [3, 6]]\n    Yes (0.00s cpu)\n    "]).
:- comment(list2rows / 4, [summary : "Create a matrix from a flat list of row-wise listed elements", template : "list2rows(+List, +NRows, +NCols, -Rows)", eg : "\n    ?- list2rows([1,2,3,4,5,6],2,3,Rows).\n    Rows = [[1, 2, 3], [4, 5, 6]]\n    Yes (0.00s cpu)\n    "]).
:- comment(matrix / 3, [summary : "Create a matrix as a list of rows", template : "matrix(+NRow, +NCols, -Rows)", eg : "\n    ?- matrix(2,3,M).\n    M = [[_175, _177, _179], [_183, _185, _187]]\n    Yes (0.00s cpu)\n    "]).
:- comment(matrix / 4, [summary : "Create a matrix as both a list of rows and a list of columns", template : "matrix(+NRows, +NCols, -Rows, -Cols)", eg : "\n    ?- matrix(2,3,Rows,Cols).\n    Rows = [[_183, _185, _187], [_191, _193, _195]]\n    Cols = [[_183, _191], [_185, _193], [_187, _195]]\n    Yes (0.00s cpu)\n    "]).
:- comment(read_data / 3, [summary : "Read numbers from a file into List", desc : html("Read numbers from a file into List until either the list is full or\n    the end of file has been reached. In the first case, not all numbers in the\n    file may be read, in the second, the list may not be fully instantiated.\n    The count of numbers that have actually been read is returned in Length.\n    "), template : "read_data(+File, ?List, -Length)", see_also : [list2rows / 4, list2cols / 4, transpose / 2]]).
:- comment(transpose / 2, [summary : "Transpose a matrix (list of rows or list of columns)", template : "transpose(+Matrix, -Transposed)", eg : "\n    ?- list2rows([1,2,3,4,5,6],2,3,Rows), transpose(Rows,Cols).\n    Rows = [[1, 2, 3], [4, 5, 6]]\n    Cols = [[1, 4], [2, 5], [3, 6]]\n    Yes (0.00s cpu)\n    "]).
