:- module(max_flow).
:- export max_flow / 5.
:- export max_flow / 7.
:- export max_flow_with_lb / 8.
:- export max_flow_with_lb / 6.
:- export feas_flow_with_lb / 8.
:- export initialize_residual_capacities / 4.
:- export max_flow_aux / 6.
:- export get_max_flow_edges / 6.
:- export max_flow / 8.
:- comment(categories, ["Algorithms"]).
:- comment(summary, "Ford-Fulkerson maximum flow algorithm").
:- comment(author, "CrossCore Optimization Ltd").
:- comment(copyright, "2007, CrossCore Optimization Ltd").
:- comment(status, prototype).
:- comment(date, "2006-2007").
:- comment(feas_flow_with_lb / 8, [summary : "Finds a feasible flow for a network with non-negative lower-bounds imposed on the edge flows,using an adapted Ford-Fulkerson maximum flow algorithm", amode : feas_flow_with_lb(+, +, +, +, +, -, -, -), args : ["Graph" : "a graph structure, no parallel edges, e(Src,Dest,EdgeData), EdgeData must be a structure with at least two arguments (for the lower and upper bounds of the edge capacity", "LowerBoundArg" : "which argument of EdgeData to use as the minimum flow (lower bound) for edge (integer) ", "CapacityArg" : "which argument of EdgeData to use as (uppoer bound) edge capacity (integer),", "SourceNode" : "source node number (integer)", "SinkNode" : "sink node number (integer)", "FlowValue" : "value of the  flow", "FlowEdges" : "list denoting edges with non-zero flow (form: Flow-Edge)", "FlowEdgesGraph" : "a graph structure, original nodes (as in Graph) but only the edges that are in max flow"], desc : html("This predicate returns a feasible flow for a network whose edges can have a (non-negative) lower bound imposed on the edge flows. This is done by transforming the network to one with zero lower-bounds and solving for feasibility. Normally this will serve as the starting point for obtaining the maximal flow for the original network, but this predicate is provided for cases where a feasible solution is sufficient. If there is a feasible solution, it returns the total flow  value for this solution, a list of all edges with  flow, and a graph of the edges with non-zero flow. It  fails if there are no feasible flow."), fail_if : "There is no feasible flow from Source to Sink", see_also : [max_flow : max_flow_with_lb / 8, max_flow : max_flow / 5, max_flow : max_flow / 7]]).
:- comment(get_max_flow_edges / 6, hidden).
:- comment(initialize_residual_capacities / 4, hidden).
:- comment(max_flow / 5, [summary : "Ford-Fulkerson maximum flow algorithm", amode : max_flow(+, +, +, +, -), args : ["Graph" : "a graph structure, no parallel edges, e(Src,Dest,EdgeData)", "CapacityArg" : "which argument of EdgeData to use as edge capacity (integer), (0 if EdgeData is a single number and -1 if every edge capacity is 1)", "SourceNode" : "source node number (integer)", "SinkNode" : "sink node number (integer)", "MaxFlowValue" : "value of the maximum flow"], desc : html("This predicate provides an implementation of the Ford-Fulkerson max-flow algorithm between two nodes in a graph. It returns the maximal achievable flow allowed by the capacities in the network."), fail_if : "There is no feasible flow between Source and Sink nodes (they are not connected).", see_also : [max_flow : max_flow / 5, max_flow : max_flow / 7, max_flow : max_flow_with_lb / 6, max_flow : max_flow_with_lb / 8, max_flow_eplex : max_flow_eplex / 5, max_flow_eplex : max_flow_eplex_dual / 5, max_flow_eplex : max_flow_eplex_dual / 7, all_min_cuts : all_min_cuts / 8, all_min_cuts : all_min_cuts / 9, all_min_cuts : all_min_cuts_list / 5, all_min_cuts_eplex : all_min_cuts_eplex / 7, all_min_cuts_eplex : all_min_cuts_eplex / 8]]).
:- comment(max_flow / 7, [summary : "Ford-Fulkerson maximum flow algorithm", amode : max_flow(+, +, +, +, -, -, -), args : ["Graph" : "a graph structure, no parallel edges, e(Src,Dest,EdgeData)", "CapacityArg" : "which argument of EdgeData to use as edge capacity (integer), (0 if EdgeData is a single number and -1 if every edge capacity is 1)", "SourceNode" : "source node number (integer)", "SinkNode" : "sink node number (integer)", "MaxFlowValue" : "value of the maximum flow", "MaxFlowEdges" : "list denoting edges with non-zero flow (form: Flow-Edge)", "MaxFlowEdgesGraph" : "a graph structure, original nodes (as in Graph) but only the edges that are in max flow"], desc : html("This predicate provides an implementation of the Ford-Fulkerson max-flow algorithm between two nodes in a graph. It returns the maximal achievable flow allowed by the capacities in the network, a list of all edges with non-zero flow, and a graph of the edges with non-zero flow."), fail_if : "There is no feasible flow between Source and Sink nodes (they are not connected).", see_also : [max_flow : max_flow / 5, max_flow : max_flow / 7, max_flow : max_flow_with_lb / 6, max_flow : max_flow_with_lb / 8, max_flow_eplex : max_flow_eplex / 5, max_flow_eplex : max_flow_eplex_dual / 5, max_flow_eplex : max_flow_eplex_dual / 7, all_min_cuts : all_min_cuts / 8, all_min_cuts : all_min_cuts / 9, all_min_cuts : all_min_cuts_list / 5, all_min_cuts_eplex : all_min_cuts_eplex / 7, all_min_cuts_eplex : all_min_cuts_eplex / 8]]).
:- comment(max_flow / 8, hidden).
:- comment(max_flow_aux / 6, hidden).
:- comment(max_flow_with_lb / 6, [summary : "Finds rhe maximum flow for a network with non-negative lower-bounds imposed on the edge flows,using an adapted Ford-Fulkerson maximum flow algorithm", amode : max_flow_with_lb(+, +, +, +, +, -), args : ["Graph" : "a graph structure, no parallel edges, e(Src,Dest,EdgeData)", "LowerBoundArg" : "which argument of EdgeData to use as the minimum flow (lower bound) for edge (integer) ", "CapacityArg" : "which argument of EdgeData to use as edge capacity (integer),", "SourceNode" : "source node number (integer)", "SinkNode" : "sink node number (integer)", "MaxFlowValue" : "value of the maximum flow"], desc : html("This predicate provides an implementation of the Ford-Fulkerson max-flow algorithm between two nodes in a graph, modified to allow edges to have non-negative minimum flows. It returns the maximal achievable flow allowed by the capacities in the network."), fail_if : "There is no feasible flow between Source and Sink nodes.", see_also : [max_flow : max_flow_with_lb / 8, max_flow : max_flow / 5, max_flow : max_flow / 7, max_flow : feas_flow_with_lb / 8, all_min_cuts : all_min_cuts / 8, all_min_cuts : all_min_cuts / 9, all_min_cuts : all_min_cuts_list / 5]]).
:- comment(max_flow_with_lb / 8, [summary : "Finds rhe maximum flow for a network with non-negative lower-bounds imposed on the edge flows,using an adapted Ford-Fulkerson maximum flow algorithm", amode : max_flow_with_lb(+, +, +, +, +, -, -, -), args : ["Graph" : "a graph structure, no parallel edges, e(Src,Dest,EdgeData)", "LowerBoundArg" : "which argument of EdgeData to use as the minimum flow (lower bound) for edge (integer) ", "CapacityArg" : "which argument of EdgeData to use as edge capacity (integer),", "SourceNode" : "source node number (integer)", "SinkNode" : "sink node number (integer)", "MaxFlowValue" : "value of the maximum flow", "MaxFlowEdges" : "list denoting edges with non-zero flow (form: Flow-Edge)", "MaxFlowEdgesGraph" : "a graph structure, original nodes (as in Graph) but only the edges that are in max flow"], desc : html("This predicate provides an implementation of the Ford-Fulkerson max-flow algorithm between two nodes in a graph, modified to allow edges to have non-negative minimum flows. It returns the maximal achievable flow allowed by the capacities in the network, a list of all edges with non-zero flow, and a graph of the edges with non-zero flow."), fail_if : "There is no feasible flow between Source and Sink nodes.", see_also : [max_flow : max_flow_with_lb / 6, max_flow : max_flow / 5, max_flow : max_flow / 7, max_flow : feas_flow_with_lb / 8, all_min_cuts : all_min_cuts / 8, all_min_cuts : all_min_cuts / 9, all_min_cuts : all_min_cuts_list / 5]]).
